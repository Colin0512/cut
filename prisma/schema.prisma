// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// schema.prisma

// 1. 指定生成器和数据源
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"          // 如果您使用 SQLite
  url      = env("DATABASE_URL") // .env.local 中需配置 DATABASE_URL="file:./dev.db"
}

// 2. 定义订单状态枚举
enum OrderStatus {
  PENDING    // 待付款
  PAID       // 已付款
  CANCELLED  // 已取消
  COMPLETED  // 已完成
}

// 3. 定义模型

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 一对多关系：一个用户可以拥有多个订单
  orders    Order[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  // 价格建议使用 Decimal 而非 Float，以防止小数精度问题
  price       Decimal  @default(0)
  // 可选：存储商品主图链接
  imageUrl    String?
  // 可选：库存数量
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 一对多关系：一个商品可以在多个订单项（OrderItem）中出现
  orderItems  OrderItem[]
}

model Order {
  id           String       @id @default(uuid())
  userId       String
  // 订单状态采用枚举，默认为 PENDING
  status       OrderStatus  @default(PENDING)
  // 订单总价（也建议使用 Decimal）
  totalPrice   Decimal      @default(0)
  // 可选：收货地址、收件人等信息
  shippingAddress String?
  // 可选：支付时间、发货时间等字段

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // 外键：一个订单属于一个用户
  user         User         @relation(fields: [userId], references: [id])
  // 一对多关系：一个订单包含多个 OrderItem
  orderItems   OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  // 商品数量
  quantity  Int      @default(1)
  // 该商品在订单中的单价（可能与 Product.price 不同，如优惠后价格）
  price     Decimal  @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 外键关联：OrderItem -> Order
  order     Order    @relation(fields: [orderId], references: [id])
  // 外键关联：OrderItem -> Product
  product   Product  @relation(fields: [productId], references: [id])
}
